@{
    ViewData["Title"] = "Edit";
}

<style>
    #loading-page {
        width: 100%;
        height: calc(100vh - 150px);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .custome-container {
        margin: 10px;
    }

    .news-title {
        margin-bottom: 22px;
    }

        .news-title input, .news-tag input {
            background-color: #fff;
            background-image: none;
            border-radius: 4px;
            border: 1px solid #dcdfe6;
            box-sizing: border-box;
            color: #606266;
            display: inline-block;
            font-size: inherit;
            height: 40px;
            line-height: 40px;
            outline: none;
            padding: 0 15px;
            width: 100%;
        }

    .news-tag input {
        border: none;
    }

    .news-tag__search-wrapper {
        border: 1px solid #dcdfe6;
    }

        .news-title input:focus, .news-tag__search-wrapper:has(input:focus) {
            border-color: #409eff;
        }

    .news-tag {
        margin-bottom: 22px;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 16px;
    }

    .news-tag__search-wrapper {
        position: relative;
        width: 100%;
        display: flex;
        background-color: #fff;
    }

    .news-tag button, .news-tag label {
        white-space: nowrap;
        cursor: pointer;
        background: #fff;
        border: 1px solid #dcdfe6;
        color: #606266;
        text-align: center;
        outline: none;
        font-weight: 500;
        padding: 12px 20px;
        font-size: 14px;
        line-height: 1;
        border-radius: 4px;
    }

    .news-tag__search-result {
        position: absolute;
        width: 100%;
        z-index: 10;
        top: 42px;
    }

    .search-result__loading {
        min-height: 140px;
        margin: 5px 0;
        box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);
        border-radius: 4px;
        border: 1px solid #e4e7ed;
        background-color: #fff;
        text-align: center;
    }

    .lds-dual-ring {
        display: inline-block;
        width: 50px;
        height: 50px;
        transform: translateY(78%);
    }

        .lds-dual-ring::after {
            content: " ";
            display: block;
            width: 34px;
            height: 34px;
            margin: 8px;
            border-radius: 50%;
            border: 4px solid black;
            border-color: black transparent black transparent;
            animation: lds-dual-ring 1.2s linear infinite;
        }

    @@keyframes lds-dual-ring {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .search-result__list {
        padding: 10px 0;
        margin: 5px 0;
        box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);
        border-radius: 4px;
        border: 1px solid #e4e7ed;
        background-color: #fff;
        width: 100%;
    }

    .search-result__item {
        padding: 0 20px;
        margin: 0;
        line-height: 34px;
        cursor: pointer;
        color: #606266;
        font-size: 14px;
        list-style: none;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .search-result__item:hover {
            background-color: #f5f7fa;
        }

    .ck-editor__editable {
        height: 79vh;
    }

    .news-content {
        display: flex;
        gap: 10px;
        position: relative;
    }

    .preview-editor {
        border: 1px solid #ccc;
        padding: 50px 10px 0 10px;
        width: 50%;
    }

    .ck.ck-reset.ck-rounded-corners {
        flex-grow: 1;
    }

    textarea {
        white-space: pre-line;
    }

    .editor-placeholder {
        position: absolute;
        left: 10px;
        top: 55px;
        color: #989898;
        font-weight: 300;
    }

    .tag-attach__wrapper {
        display: flex;
    }

    .tag-attach {
        background-color: rgb(244, 244, 245);
        color: rgb(144, 147, 153);
        border-color: rgb(233, 233, 235);
        margin: 5px 0 5px 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        padding: 0 9px;
    }

        .tag-attach i {
            cursor: pointer;
        }

        .tag-attach span {
            white-space: nowrap;
        }

    .image-wrapper {
        position: relative;
    }

    .image-detail__wrappper {
        position: absolute;
        width: 400px;
        transform-origin: center top;
        z-index: 99;
        top: 54px;
        right: 2px;
        box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 12px 0px;
        background: rgb(255, 255, 255);
        border-radius: 4px;
        border-width: 1px;
        border-style: solid;
        border-color: rgb(235, 238, 245);
        padding: 12px;
    }

    .image-detail__view {
        /* background-image: url(../img/anh.jpg); */
        width: 100%;
        height: 150px;
        background-size: cover;
        overflow: hidden;
        background-position: 50% center;
        background-repeat: no-repeat;
        border-width: 1px;
        border-style: solid;
        border-color: rgb(236, 236, 236);
        display: flex;
        justify-content: center;
        align-items: center;
        color: #606266;
    }

    .image-detail__action {
        display: flex;
        justify-content: space-between;
    }

    p.no-tag-found {
        text-align: center;
        padding: 20px;
    }
</style>

<div id="loading-page">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
<div class="custome-container position-relative d-none">
    <div class="news-title news-tag">
        <input type="text" placeholder="Title">
        <div class="image-wrapper">
            <button class="change-image">Change Image</button>
            <div class="image-detail__wrappper d-none">
                <div class="image-detail__view">
                    <span>Your image here</span>
                    <!-- <img src="./assets/img/avatar.jpg" alt=""> -->
                </div>
                <hr>
                <div class="image-detail__action">
                    <input type="file" id="add-image" hidden>
                    <label class="add-image__btn" for="add-image">Add Image</label>
                    <button class="delete-image__btn">Delete Image</button>
                </div>
            </div>
        </div>
        <button class="add-news__btn">Update Blog</button>
    </div>
    <div class="news-content">
        <textarea id="editor">
            </textarea>
        <div class="editor-placeholder">
            Enter to create a newline <br />
            Crtl + P to toggle previews
        </div>
        <div class="preview-editor"></div>
    </div>
    <div class="toast align-items-center text-white bg-primary border-0 position-absolute top-0 end-0" role="alert" aria-live="assertive"
         aria-atomic="true" autohide="true" data-bs-delay="2000">
        <div class="d-flex">
            <div class="toast-body">
                At least one tag is required!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<script>

    let _$ = (selector) => document.querySelector(selector);
    let errorMess = '';
    let image = null;
    const handleImage = () => {
        let changeImage = _$('button.change-image');
        let imageDetailWrapper = _$('.image-detail__wrappper');
        let addImage = _$('#add-image');
        let delImage = _$('.delete-image__btn');

        changeImage.addEventListener('click', (e) => {
            imageDetailWrapper.classList.toggle('d-none')
        })
        window.addEventListener('click', (e) => {
            if (e.target.closest('.image-detail__wrappper') == null && !e.target.classList.contains('change-image')) {
                imageDetailWrapper.classList.add('d-none')
            }
        })
        addImage.addEventListener('change', (e) => {
            const [file] = addImage.files //dua bien file nay ra de submit
            let imageCheck = new Image();
            imageCheck.onload = function() {
                if (file) {
                    if (_$('.image-detail__view span')) _$('.image-detail__view span').remove();
                    _$('.image-detail__view').style.backgroundImage = `url(${URL.createObjectURL(file)})`
                }
                let reader = new FileReader();
                reader.onloadend = function() {
                    image = reader.result;
                }
                reader.readAsDataURL(file);
            };
            imageCheck.onerror = function() {
                errorMess = 'Invalid image!'
                showToast(errorMess);
            };
            imageCheck.src = URL.createObjectURL(file);
        })
        delImage.addEventListener('click', (e) => {
            //xoa bien file
            image = null;

            if (_$('.image-detail__view span') == null) {
                _$('.image-detail__view').innerHTML = `<span>Your image here</span>`;
            }
            _$('.image-detail__view').style.backgroundImage = `none`;
        })
    }

    function AddNews() {
        let editorData;
        let editorPlacholder = _$('.editor-placeholder');
        let previewEditor = _$('.preview-editor');
        let postBtn = _$('.add-news__btn');
        let title = _$('.news-title input');
        let blogId;

        window.addEventListener('load', async () => {
            let url_string = document.URL;
            let url = new URL(url_string);
            blogId = url.searchParams.get("id");
            try {
                const response = await fetch(`http://localhost:5000/api/Blog/${blogId}`);
                const dataRs = await response.json();
                console.log(dataRs);

                _$('.news-title input').value = dataRs.data.title;
                _$('.image-detail__view span').remove();
                _$('.image-detail__view').style.backgroundImage = `url(${dataRs.data.imageUrl})`;
                image = dataRs.data.imageUrl;

                ClassicEditor
                    .create(_$('#editor'), { initialData: dataRs.data.content })
                    .then(editor => {
                        editorPlacholder.classList.add('d-none');
                        editorData = dataRs.data.content;
                        previewEditor.innerHTML = dataRs.data.content;
                        editor.model.document.on('change:data', (evt, data) => {
                            editorData = editor.getData();
                            if (editorData !== '') {
                                editorPlacholder.classList.add('d-none')
                            } else {
                                editorPlacholder.classList.remove('d-none')
                            }

                            previewEditor.innerHTML = editorData;
                        });
                    })
                    .catch(error => {
                        console.error(error);
                    });

                // image
                handleImage();

                // display page
                _$('#loading-page').classList.add('d-none');
                _$('.custome-container').classList.remove('d-none');
            } catch (error) {
                console.error('There was an error!', error);
                showToast('There was an error!')
            }
        });


        window.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key == 'p') {
                e.preventDefault();
                previewEditor.classList.toggle('d-none');
            }
        })

        postBtn.addEventListener('click', async (e) => {
            if (title.value.trim() === '') {
                errorMess = 'Please input a title!'
                showToast(errorMess);
                return;
            }

            if (image == null) {
                errorMess = 'Image is required!'
                showToast(errorMess);
                return;
            }
            if (editorData === undefined || editorData === '') {
                errorMess = 'Blog content is required!'
                showToast(errorMess);
                return;
            }

            let dataSend = {
                title: title.value,
                content: editorData,
                imageUrl: image,
            };

            try {
                const response = await fetch(`http://localhost:5000/api/Blog/update/${blogId}`, {
                    method: 'PUT',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getUserData().accessToken,
                    },
                    body: JSON.stringify(dataSend)
                });

                const responseData = await response.json();
                errorMess = responseData.message;
                showToast(errorMess);

                if (responseData.isSuccess) {
                    document.location.href = '/blog';
                }
            } catch (error) {
                console.error('There was an error!', error);
                showToast('There was an error!');
            }
        });

    }

    AddNews()
</script>